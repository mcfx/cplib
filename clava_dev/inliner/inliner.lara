function randstr(n) {
	var res = '';;	for (var i=0; i<n; i++) {
		res += String.fromCharCode(97 + Math.floor(Math.random() * 25));
	}
	return res;
}

function hasPragma(s, name, content) {
	for (var pragma of s.pragmas) {
		if (pragma.name == name && pragma.content == content)
			return true;
	}
	return false;
}

function removePragma(s, name, content) {
	for (var pragma of s.pragmas) {
		if (pragma.name == name && pragma.content == content)
			pragma.replaceWith('');
	}
}

function stmtParent(x) {
	while (typeof(x) != "undefined" && !x.instanceOf('statement')) {
		x = x.parent;
	}
	return x;
}

function inlineCall($call) {
	var labels = [];
	for (var icall of $call.descendants('call')) {
		var tl = inlineCall(icall);
		if (tl) for (var label of tl) {
			labels.push(label);
		}
	}
	var $function = $call.function;
	//println($function.astId+'|'+$function.userField('inline')+'|'+$function.userField('inlinedCode')+'|'+$function.children);
	if ($call.userField('inlined') || !$function.userField('inline')) return labels;
	$call.setUserField('inlined', true);
	var $stmt = stmtParent($call);
	if (typeof($stmt) == "undefined") return labels;
	var code = $function.userField('inlinedCode'), globalVarUsing = $function.userField('globalVarUsing'), gotoLabels = $function.userField('gotoLabels');
	var oretName = $function.userField('retName'), retName = 'F'+$call.line+'_'+$call.column+'_';

	var declCode = '', declRetCode = '';
	if ($function.returnType.code != 'void') declRetCode += $function.returnType.code+' _R'+retName+';';
	var argsCode = '', i = 0;
	for (var param of $function.params) {
		var tname = '_A'+i+'_'+$call.line+'_'+$call.column;
		declCode += param.type.code+' '+tname+'='+$call.args[i].code+';';
		argsCode += param.code+'='+tname+';';
		i++;
	}
	code = code.replace(new RegExp(oretName, 'g'), retName);
	labels.push('_G'+retName);
	for (var label of gotoLabels) {
		var nlabel = '_I'+retName+labels.length+'_';
		code = code.replace(new RegExp(label, 'g'), nlabel);
		labels.push(nlabel);
	}
	
	$stmt.insertBefore(declRetCode+'{'+declCode+'{'+argsCode+globalVarUsing+code+'}_G'+retName+':;}');
	if (declRetCode != '') $call.replaceWith('_R'+retName); else $call.replaceWith('');

	return labels;
}

aspectdef inlineFunctions
	select function end
	apply
		//println($function.name+','+$function.isInline);
		if (hasPragma($function, 'cplib', 'inline')) {
			removePragma($function, 'cplib', 'inline');
			$function.setUserField('inline', true);
			var globalVars = {};
			for (var $varref of $function.descendants('varref')) {
				if (typeof($varref.decl) != "undefined" && !$function.contains($varref.decl)) {
					globalVars[$varref.decl.qualifiedName] = true;
				}
			}
			var globalVarUsing = '';
			for (var globalVar in globalVars) {
				globalVarUsing += 'using ::'+globalVar+';';
			}
			$function.setUserField('globalVarUsing', globalVarUsing);

			//println($function.code);
			//println($function.params[0].code);
			//println($function.returnType.code);
			/*println($function.qualifiedPrefix+'|'+$function.params);
			println($function.body.children);*/
			var labels = [];
			for (var $call of $function.descendants('call')) {
				var tl = inlineCall($call);
				if (tl) for (var label of tl) {
					labels.push(label);
				}
			}
			var retName = '_F_'+randstr(10)+'_';
			var originalCode = $function.body.code;
			for (var stmt of $function.descendants('returnStmt')) {
				var rexpr = stmt.returnExpr, co = '{';
				if (typeof(rexpr) != "undefined") {
					co += '_R'+retName+'='+rexpr.code+';';
				}
				co += 'goto _G'+retName+';}';
				stmt.replaceWith(co);
			}
			var code = $function.body.code;
			$function.body.replaceWith(originalCode);
			//for (var stmt of $function.body.children) {
			/*for (var stmt of $function.descendants('stmt')) {
				if (stmt.instanceOf('returnStmt')) {
					var rexpr = stmt.returnExpr;
					code += '{';
					if (typeof(rexpr) != "undefined") {
						code += '_R'+retName+'='+rexpr.code+';';
					}
					code += 'goto _G'+retName+';}';
				} else {
					code += stmt.code;
				}
			}*/
			//println(code);
			$function.setUserField('inlinedCode', code);
			$function.setUserField('retName', retName);
			$function.setUserField('gotoLabels', labels);
			//println(code);
		}
	end

	select program end
	apply
		for (var $call of $program.descendants('call')) {
			//println($call);
			inlineCall($call);
		}
	end
end

aspectdef main
	//cmd('bash',['/mnt/d/proj/cplib/clava_dev/modint/gen.sh']);
	call inlineFunctions();
	select program end
	apply
		println($program.code);
	end
end